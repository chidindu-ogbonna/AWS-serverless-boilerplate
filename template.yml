# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Severless Backend

# XXX: Example Policies
# Policies:
#   # Give Create/Read/Update/Delete Permissions to the SampleTable
#   - DynamoDBCrudPolicy:
#       TableName: !Ref SampleTable
# Environment:
#   Variables:
#     # Make table name accessible as environment variable from function code during execution
#     SAMPLE_TABLE: !Ref SampleTable

Parameters:
  Stage:
    Type: String
    Default: prod

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 540
    MemorySize: 256
    Environment:
      Variables:
        CASES_TABLE_DB: cases
        STAGE: prod
        REGION: us-east-1

Resources:
  ApiDeployment:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  # Cases
  casesGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cases.getCase
      Description: Get a single case
      Policies:
        # Give Lambda basic execution Permission
        - AWSLambdaBasicExecutionRole
        # Give DynamoDB Full Access to your Lambda Function
        - AmazonDynamoDBFullAccess
      Events:
        casesGet:
          Type: Api
          Properties:
            Path: /v1/cases/{id}
            Method: get
            RestApiId: !Ref ApiDeployment

  casesGetAll:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cases.getAllCases
      Description: Get all cases
      Events:
        casesGetAll:
          Type: Api
          Properties:
            Path: /v1/cases
            Method: get
            RestApiId: !Ref ApiDeployment

  casesUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cases.updateCase
      Description: Update a case
      Events:
        casesUpdate:
          Type: Api
          Properties:
            Path: /v1/cases/{id}
            Method: put
            RestApiId: !Ref ApiDeployment

  casesCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cases.createCase
      Description: Create a case
      Events:
        casesCreate:
          Type: Api
          Properties:
            Path: /v1/cases
            Method: post
            RestApiId: !Ref ApiDeployment

  casesDelete:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/cases.deleteCase
      Description: Delete a case
      Events:
        casesDelete:
          Type: Api
          Properties:
            Path: /v1/cases/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

  # Hospitals
  hospitalsGetAll:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hospitals/get-all-hospitals.handler
      Description: Get all hospitals
      Events:
        hospitalsGetAll:
          Type: Api
          Properties:
            Path: /v1/hospitals
            Method: get
            RestApiId: !Ref ApiDeployment

  hospitalsCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hospitals/create-new-hospital.handler
      Description: Create a new hospital
      Events:
        hospitalsCreate:
          Type: Api
          Properties:
            Path: /v1/hospitals
            Method: post
            RestApiId: !Ref ApiDeployment

  hospitalsDelete:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hospitals/delete-hospital.handler
      Description: Delete a new hospital
      Events:
        hospitalsDelete:
          Type: Api
          Properties:
            Path: /v1/hospitals/{id}
            Method: delete
            RestApiId: !Ref ApiDeployment

Outputs:
  ApiDeployment:
    Description: "API Gateway endpoint URL for stage"
    Value: !Sub "https://${ApiDeployment}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
